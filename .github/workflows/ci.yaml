name: App Build

on:
  push:
    branches:
      - master
      - production
      - development
  workflow_dispatch:

env:
  DOCKER_ID: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PW: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_CONTAINER_REGISTRY }}
  APP_NAME: angularjs-skeleton
  HELM_REPO: git@github.com:NasajonSRE/helm.git
  HARBOR_PROJECT: ana
  CHART_FOLDER: charts/projeto-ana
  ARGO_PROJECT: ana-common

jobs:

  init:
    runs-on: ubuntu-latest
    outputs:
      CLUSTER: ${{ env.cluster }}
      VERSION: ${{ env.version }}
      VAULT_URL: ${{ env.vault_url }}
      VAULT_TOKEN: ${{ env.vault_token }}
      ARGO_PROJECT: ${{ env.argo_project }}
      ARGO_NAME: ${{ env.argo_name }}
      VALUES_FILE: ${{ env.values_file }}.yaml
      BRANCH_NAME: ${{ env.branch_name }}
      NAMESPACE: ${{ env.namespace }}

    steps:
    - uses: actions/checkout@v3
      with:
          ref: ${{github.base_ref}}

    - name: Set variables
      id: setvars
      run: |
        if [[ "${{github.base_ref}}" == "production" || "${{github.ref}}" == "refs/heads/production" ]]; then
          echo "cluster=nasajon-prod" >> "$GITHUB_ENV"
          echo "vault_url=safe.nasajon.app" >> "$GITHUB_ENV"
          echo "branch_name=production" >> "$GITHUB_ENV"
          echo "values_file=prod-values" >> "$GITHUB_ENV"
          echo "argo_name=$APP_NAME" >> "$GITHUB_ENV"
          echo "vault_token=${{ secrets.VAULT_TOKEN }}" >> "$GITHUB_ENV"
          echo "namespace=ana-common" >> "$GITHUB_ENV"

        fi

        if [[ "${{github.base_ref}}" == "master" || "${{github.ref}}" == "refs/heads/master" ]]; then
          echo "cluster=nasajon-ztaqa" >> "$GITHUB_ENV"
          echo "version=0-rc" >> "$GITHUB_ENV"
          echo "vault_url=safe.nasajon.qa" >> "$GITHUB_ENV"
          echo "branch_name=master" >> "$GITHUB_ENV"
          echo "values_file=qa-values" >> "$GITHUB_ENV"
          echo "argo_name=$APP_NAME-qa" >> "$GITHUB_ENV"
          echo "vault_token=${{ secrets.VAULT_TOKEN_QA }}" >> "$GITHUB_ENV"
          echo "namespace=ana-common" >> "$GITHUB_ENV"
        fi

        if [[ "${{github.base_ref}}" == "development" || "${{github.ref}}" == "refs/heads/development" ]]; then
          echo "cluster=nasajon-ztadev" >> "$GITHUB_ENV"
          echo "version=0-alpha" >> "$GITHUB_ENV"
          echo "vault_url=safe.nasajon.dev" >> "$GITHUB_ENV"
          echo "branch_name=development" >> "$GITHUB_ENV"
          echo "values_file=dev-values" >> "$GITHUB_ENV"
          echo "argo_name=$APP_NAME-dev" >> "$GITHUB_ENV"
          echo "vault_token=${{ secrets.VAULT_TOKEN_DEV }}" >> "$GITHUB_ENV"
          echo "namespace=ana-common" >> "$GITHUB_ENV"
        fi
  build:
    runs-on: ubuntu-latest
    needs: init

    steps:
    - uses: actions/checkout@v3
      with:
          ref: ${{github.base_ref}}

    - name: Install SSH key
      run: |
        mkdir ~/.ssh/
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        touch ~/.ssh/known_hosts
        ssh-keyscan github.com >> ~/.ssh/known_hosts

    - name: Sets Vault Key
      run: |
        if [[ "${{github.base_ref}}" == "production" || "${{github.ref}}" == "refs/heads/production" ]]; then
          echo "VAULT_TOKEN=${{ secrets.VAULT_TOKEN }}" >> "$GITHUB_ENV"
        fi

        if [[ "${{github.base_ref}}" == "master" || "${{github.ref}}" == "refs/heads/master" ]]; then
          echo "VAULT_TOKEN=${{ secrets.VAULT_TOKEN_QA }}" >> "$GITHUB_ENV"
        fi

        if [[ "${{github.base_ref}}" == "development" || "${{github.ref}}" == "refs/heads/development" ]]; then
          echo "VAULT_TOKEN=${{ secrets.VAULT_TOKEN_DEV }}" >> "$GITHUB_ENV"
        fi

    - name: Get Sprint from Vault
      run: |
        VAULT_URL=$(echo "${{needs.init.outputs.VAULT_URL}}")
        resposta=$(curl --request GET \
        --url https://$VAULT_URL/v1/app/data/$APP_NAME/version \
        --header "X-Vault-Token: $VAULT_TOKEN")
        valor=$(echo $resposta | jq '.data')
        echo "VAULT_SPRINT=$(echo $valor)" >> $GITHUB_ENV
      id: versioning

    - name: Set Docker Image Tag
      run: |
        RELEASE=$(echo $VAULT_SPRINT | jq '.data.release')
        SPRINT=$(echo $VAULT_SPRINT | jq '.data.sprint')
        BUILD=$(echo $VAULT_SPRINT | jq '.data.build')
        VERSION=$(echo "${{needs.init.outputs.VERSION}}")
        DOCKERTAG="v${RELEASE//\"/}.${SPRINT//\"/}.${VERSION//\"/}${BUILD//\"/}"
        echo "New Image TAG: $DOCKERTAG"
        echo "GITHUB_DOCKERTAG=$(echo $DOCKERTAG)" >> $GITHUB_ENV
        echo "APP_RELEASE=$(echo ${RELEASE//\"/})" >> $GITHUB_ENV
        echo "APP_SPRINT=$(echo ${SPRINT//\"/})" >> $GITHUB_ENV
        echo "APP_BUILD=$(echo ${BUILD//\"/})" >> $GITHUB_ENV
        if [ -z "${SPRINT//\"/}" ]; then
          echo "Vault retornou $status_code. Encerrando o job."
          exit 1
        fi

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.DOCKER_CONTAINER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Config
      run: |
        cp src/config/config.json.dist src/config/config.json
        if [[ "${{github.base_ref}}" == "production" || "${{github.ref}}" == "refs/heads/production" ]]; then
          sed -i 's?api.dev.meutrabalho.app?api.meutrabalho.app?g' src/config/config.json
          sed -i 's?auth.dev.nasajonsistemas.com.br?auth.nasajon.com.br?g' src/config/config.json
          sed -i 's?DEV?master?g' src/config/config.json
          sed -i 's?YW5hZHBjaGF0Ym90ZGV2OmEyZWNlYTQyLTFiMmMtNGNlNS04ZWUxLTNiNzNhNmUxOWY4Ng==?dGVzdGVodHRwMjE6MGMyZjdlYWYtZjAwZC00ZDBkLTliMDgtN2UyNDhlNjFkYWJl?g' src/config/config.json
        fi
        if [[ "${{github.base_ref}}" == "master" || "${{github.ref}}" == "refs/heads/master" ]]; then
          sed -i 's?api.dev.meutrabalho.app?api.qa.meutrabalho.app?g' src/config/config.json
          sed -i 's?auth.dev.nasajonsistemas.com.br?auth.nasajonsistemas.com.br?g' src/config/config.json
          sed -i 's?DEV?QA?g' src/config/config.json
          sed -i 's?YW5hZHBjaGF0Ym90ZGV2OmEyZWNlYTQyLTFiMmMtNGNlNS04ZWUxLTNiNzNhNmUxOWY4Ng==?YW5hZHBjaGF0Ym90cWE6MTQ4YmFjZGMtMzVlZS00ZWFmLWIzOWItY2VlMzViMzg0MDQ2?g' src/config/config.json
        fi

    - name: NodeDeps
      run: |
        docker run \
        -v ~/.ssh:/root/.ssh \
        -v $(pwd):/app \
        -w /app \
        --rm \
        nasajon/yarn:1.9.4 \
        /bin/sh -c "yarn install"

    - name: WebPack
      run: |
        docker run \
        -v ~/.ssh:/root/.ssh \
        -v $(pwd):/app \
        -e NODE_ENV=production \
        -w /app \
        --rm \
        nasajon/yarn:1.9.4 \
        /bin/sh -c "node node_modules/.bin/webpack"

    - name: Build docker
      run: |
        echo 'Building the Docker image...'
        docker build --no-cache --rm -t $DOCKER_REGISTRY/$HARBOR_PROJECT/$APP_NAME:$GITHUB_DOCKERTAG .
        echo 'Pushing the Docker image...'
        echo 'All done!'

    - name: Trivy Scanning
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_REGISTRY }}/${{env.HARBOR_PROJECT}}/${{env.APP_NAME}}:${{ env.GITHUB_DOCKERTAG }}'
        format: 'table'
        output: 'trivy-results.txt'

    - name: Upload report Trivy
      uses: actions/upload-artifact@v2
      with:
        name: Trivy
        path: |
          trivy-results.txt

    - name: Push to docker
      run: docker push $DOCKER_REGISTRY/$HARBOR_PROJECT/$APP_NAME:$GITHUB_DOCKERTAG

    - name: Atualizar Secret do Vault
      run: |
        VAULT_URL=$(echo "${{needs.init.outputs.VAULT_URL}}")
        NEXT_BUILD=$(($APP_BUILD + 1))
        JSON_DATA=$(cat <<EOF
        {"data": {"release": "$APP_RELEASE", "sprint": "$APP_SPRINT", "build": "$NEXT_BUILD"}}
        EOF
        )
        curl --request POST \
          --url https://$VAULT_URL/v1/app/data/$APP_NAME/version \
          --header 'Content-Type: application/json' \
          --header "X-Vault-Token: $VAULT_TOKEN" \
          --data "$JSON_DATA"

    - name: Render Values in Helm git repo
      run: |
        VALUES_FILE=$(echo "${{needs.init.outputs.VALUES_FILE}}")
        echo Create temporary folder to clone the repo into...
        TEMP_FOLDER="$(mktemp -d)"
        echo Clone the repository...
        git clone -b main "git@github.com:NasajonSRE/helm.git" ${TEMP_FOLDER}
        pwd
        ls -lah
        cp ci/$VALUES_FILE ${TEMP_FOLDER}/$CHART_FOLDER/$APP_NAME/$VALUES_FILE
        cd ${TEMP_FOLDER}/$CHART_FOLDER/$APP_NAME
        echo "Update Helm values with new image tag"
        sed -i "s/{{ TAG }}/$GITHUB_DOCKERTAG/g" $VALUES_FILE
        echo "Helm values rendered in $CHART_FOLDER/$APP_NAME/$VALUES_FILE"
        cat $VALUES_FILE
        cd ${TEMP_FOLDER}/
        git config user.email "deployuser@nasajon.com.br"
        git config user.name "Github Deploy User"
        git add .
        git commit -m "Rendered Helm chart values for $APP_NAME_PRETTY - Version [$GITHUB_DOCKERTAG]" || true
        git push -u origin main || true

  container-render-argo:
    needs: [build, init]
    runs-on: ubuntu-latest
    container:
      image: hub.nasajon.in/sre/utils:0.10
      credentials:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Sets env vars for environment
        run: |
          echo "ARGO_NAME=$(echo ${{needs.init.outputs.ARGO_NAME}})" >> $GITHUB_ENV
          echo "CLUSTER=$(echo ${{needs.init.outputs.CLUSTER}})" >> $GITHUB_ENV
          echo "VALUES_FILE=$(echo ${{needs.init.outputs.VALUES_FILE}})" >> $GITHUB_ENV
          echo "NAMESPACE=$(echo ${{needs.init.outputs.NAMESPACE}})" >> $GITHUB_ENV
      - name: Render ArgoCD application
        run: |
          cd /workspace
          cp argo-prod.yaml.j2 $ARGO_NAME-argo.yaml
          echo "Create Client ArgoCD application..."
          sed -i "s#./charts/{{ APP }}#./$CHART_FOLDER/${APP_NAME}#g" /workspace/$ARGO_NAME-argo.yaml
          sed -i "s/- values.yaml/- $VALUES_FILE/g" /workspace/$ARGO_NAME-argo.yaml
          sed -i "s/{{ CLUSTER }}/$CLUSTER/g" /workspace/$ARGO_NAME-argo.yaml
          sed -i "s/{{ NAMESPACE }}/$NAMESPACE/g" /workspace/$ARGO_NAME-argo.yaml
          sed -i "s/{{ APP }}/$ARGO_NAME/g" /workspace/$ARGO_NAME-argo.yaml
          sed -i "s/default/$ARGO_PROJECT/g" /workspace/$ARGO_NAME-argo.yaml
          cat $ARGO_NAME-argo.yaml
          kubectl --kubeconfig=./kubeconfig-sre apply -f $ARGO_NAME-argo.yaml
          echo "Job Finished."

  # sending-email:
  #   needs: container-render-argo
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get commits
  #       uses: actions/github-script@v6.3.1
  #       id: changelog
  #       env:
  #         COMMITS: ${{ toJSON(github.event.commits) }}
  #       with:
  #         result-encoding: string
  #         script: |
  #           const commits = JSON.parse(process.env.COMMITS);
  #           var lines = "## O que mudou:\n\n";
  #           for (const commit of commits) {
  #             lines += "- " + commit.message + " (" + commit.id + ") @" + commit.author.username + "\n"
  #           }
  #           return lines
  #     - name: Send email
  #       uses: dawidd6/action-send-mail@v3.7.1
  #       with:
  #         server_address: ${{secrets.MAIL_CONNECTION}}
  #         server_port: 465
  #         secure: true
  #         username: ${{secrets.MAIL_USERNAME}}
  #         password: ${{secrets.MAIL_PASSWORD}}
  #         subject: Release notes
  #         to: nicolasscorpelini@nasajon.com.br
  #         from: SRE # <user@example.com>
  #         body: ${{ steps.changelog.outputs.result }}
  #         ignore_cert: true
  #         convert_markdown: true
  #         priority: low
